/*
 * This file is generated by jOOQ.
 */
package org.bspv.evouchers.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.bspv.evouchers.jooq.Indexes;
import org.bspv.evouchers.jooq.Keys;
import org.bspv.evouchers.jooq.Public;
import org.bspv.evouchers.jooq.tables.records.TeamMembersRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamMembers extends TableImpl<TeamMembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TEAM_MEMBERS</code>
     */
    public static final TeamMembers TEAM_MEMBERS = new TeamMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamMembersRecord> getRecordType() {
        return TeamMembersRecord.class;
    }

    /**
     * The column <code>PUBLIC.TEAM_MEMBERS.USER_ID</code>.
     */
    public final TableField<TeamMembersRecord, UUID> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TEAM_MEMBERS.DISTRIBUTION_YEAR</code>.
     */
    public final TableField<TeamMembersRecord, Integer> DISTRIBUTION_YEAR = createField(DSL.name("DISTRIBUTION_YEAR"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TEAM_MEMBERS.TEAM_NUMBER</code>.
     */
    public final TableField<TeamMembersRecord, Integer> TEAM_NUMBER = createField(DSL.name("TEAM_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TEAM_MEMBERS.VALIDITY_START</code>.
     */
    public final TableField<TeamMembersRecord, LocalDateTime> VALIDITY_START = createField(DSL.name("VALIDITY_START"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TEAM_MEMBERS.VALIDITY_END</code>.
     */
    public final TableField<TeamMembersRecord, LocalDateTime> VALIDITY_END = createField(DSL.name("VALIDITY_END"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private TeamMembers(Name alias, Table<TeamMembersRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamMembers(Name alias, Table<TeamMembersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.TEAM_MEMBERS</code> table reference
     */
    public TeamMembers(String alias) {
        this(DSL.name(alias), TEAM_MEMBERS);
    }

    /**
     * Create an aliased <code>PUBLIC.TEAM_MEMBERS</code> table reference
     */
    public TeamMembers(Name alias) {
        this(alias, TEAM_MEMBERS);
    }

    /**
     * Create a <code>PUBLIC.TEAM_MEMBERS</code> table reference
     */
    public TeamMembers() {
        this(DSL.name("TEAM_MEMBERS"), null);
    }

    public <O extends Record> TeamMembers(Table<O> child, ForeignKey<O, TeamMembersRecord> key) {
        super(child, key, TEAM_MEMBERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_TEAM_MEMBERS__USERS, Indexes.IX_TEAM_MEMBERS__NUMBER, Indexes.IX_TEAM_MEMBERS__YEAR, Indexes.SYS_PK_10184);
    }

    @Override
    public UniqueKey<TeamMembersRecord> getPrimaryKey() {
        return Keys.SYS_PK_10184;
    }

    @Override
    public List<UniqueKey<TeamMembersRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamMembersRecord>>asList(Keys.SYS_PK_10184);
    }

    @Override
    public List<ForeignKey<TeamMembersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamMembersRecord, ?>>asList(Keys.FK_TEAM_MEMBERS__USERS);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK_TEAM_MEMBERS__USERS);

        return _users;
    }

    @Override
    public TeamMembers as(String alias) {
        return new TeamMembers(DSL.name(alias), this);
    }

    @Override
    public TeamMembers as(Name alias) {
        return new TeamMembers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMembers rename(String name) {
        return new TeamMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMembers rename(Name name) {
        return new TeamMembers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
